{
  "ProgDeclaration": {
    "$": "ProgDeclaration -> DeclarationList",
    "kw_fn": "ProgDeclaration -> DeclarationList",
    "atomic_type": "ProgDeclaration -> DeclarationList",
    "lbracket": "ProgDeclaration -> DeclarationList"
  },
  "DeclarationList": {
    "kw_fn": "DeclarationList -> Declaration DeclarationList",
    "atomic_type": "DeclarationList -> Declaration DeclarationList",
    "lbracket": "DeclarationList -> Declaration DeclarationList",
    "$": "DeclarationList -> ''"
  },
  "Declaration": {
    "atomic_type": "Declaration -> VariableDeclaration semi_colon",
    "lbracket": "Declaration -> VariableDeclaration semi_colon",
    "kw_fn": "Declaration -> FunctionDeclaration"
  },
  "VariableDeclaration": {
    "atomic_type": "VariableDeclaration -> Type AtomicDeclarationList",
    "lbracket": "VariableDeclaration -> Type AtomicDeclarationList"
  },
  "AtomicDeclarationList": {
    "identifier": "AtomicDeclarationList -> AtomicDeclaration comma AtomicDeclarationList",
    "semi_colon": "AtomicDeclarationList -> ''"
  },
  "AtomicDeclaration": {
    "identifier": "AtomicDeclaration -> identifier assign Expression"
  },
  "FunctionDeclaration": {
    "kw_fn": "FunctionDeclaration -> kw_fn identifier lparen ArgList rparen Type lbrace StmtList rbrace"
  },
  "ArgList": {
    "atomic_type": "ArgList -> Type identifier comma ArgList",
    "lbracket": "ArgList -> Type identifier comma ArgList",
    "rparen": "ArgList -> ''"
  },
  "Expression": {
    "lparen": "Expression -> Term ExpressionRHS",
    "int_literal": "Expression -> Term ExpressionRHS",
    "float_literal": "Expression -> Term ExpressionRHS",
    "str_literal": "Expression -> Term ExpressionRHS",
    "bool_literal": "Expression -> Term ExpressionRHS",
    "identifier": "Expression -> Term ExpressionRHS"
  },
  "ExpressionRHS": {
    "bin_op": "ExpressionRHS -> bin_op Expression",
    "comma": "ExpressionRHS -> ''",
    "rparen": "ExpressionRHS -> ''",
    "semi_colon": "ExpressionRHS -> ''",
    "lbrace": "ExpressionRHS -> ''"
  },
  "Term": {
    "lparen": "Term -> lparen Expression rparen",
    "int_literal": "Term -> int_literal",
    "float_literal": "Term -> float_literal",
    "str_literal": "Term -> str_literal",
    "bool_literal": "Term -> bool_literal",
    "identifier": "Term -> IdentifierOrCallTerm"
  },
  "IdentifierOrCallTerm": {
    "identifier": "IdentifierOrCallTerm -> identifier Call"
  },
  "Call": {
    "lparen": "Call -> lparen FormalArgList rparen",
    "bin_op": "Call -> ''",
    "comma": "Call -> ''",
    "rparen": "Call -> ''",
    "semi_colon": "Call -> ''",
    "lbrace": "Call -> ''"
  },
  "FormalArgList": {
    "lparen": "FormalArgList -> Expression comma FormalArgList",
    "int_literal": "FormalArgList -> Expression comma FormalArgList",
    "float_literal": "FormalArgList -> Expression comma FormalArgList",
    "str_literal": "FormalArgList -> Expression comma FormalArgList",
    "bool_literal": "FormalArgList -> Expression comma FormalArgList",
    "identifier": "FormalArgList -> Expression comma FormalArgList",
    "rparen": "FormalArgList -> ''"
  },
  "StmtList": {
    "lbrace": "StmtList -> Stmt StmtList",
    "atomic_type": "StmtList -> Stmt StmtList",
    "lbracket": "StmtList -> Stmt StmtList",
    "identifier": "StmtList -> Stmt StmtList",
    "kw_return": "StmtList -> Stmt StmtList",
    "lparen": "StmtList -> Stmt StmtList",
    "int_literal": "StmtList -> Stmt StmtList",
    "float_literal": "StmtList -> Stmt StmtList",
    "str_literal": "StmtList -> Stmt StmtList",
    "bool_literal": "StmtList -> Stmt StmtList",
    "kw_if": "StmtList -> Stmt StmtList",
    "kw_for": "StmtList -> Stmt StmtList",
    "kw_while": "StmtList -> Stmt StmtList",
    "rbrace": "StmtList -> ''"
  },
  "Stmt": {
    "atomic_type": "Stmt -> VariableDeclaration semi_colon",
    "lbracket": "Stmt -> VariableDeclaration semi_colon",
    "identifier": "Stmt -> Assignment semi_colon Stmt -> Expression semi_colon",
    "kw_if": "Stmt -> Conditional",
    "kw_for": "Stmt -> Loop",
    "kw_while": "Stmt -> Loop",
    "kw_return": "Stmt -> Return semi_colon",
    "lparen": "Stmt -> Expression semi_colon",
    "int_literal": "Stmt -> Expression semi_colon",
    "float_literal": "Stmt -> Expression semi_colon",
    "str_literal": "Stmt -> Expression semi_colon",
    "bool_literal": "Stmt -> Expression semi_colon",
    "lbrace": "Stmt -> lbrace StmtList rbrace"
  },
  "Assignment": { "identifier": "Assignment -> identifier assign Expression" },
  "Conditional": { "kw_if": "Conditional -> IfBlock ElifBlocks ElseBlock" },
  "IfBlock": { "kw_if": "IfBlock -> kw_if Expression lbrace StmtList rbrace" },
  "ElifBlocks": {
    "kw_elif": "ElifBlocks -> ElifBlock ElifBlocks",
    "kw_else": "ElifBlocks -> ''",
    "rbrace": "ElifBlocks -> ''",
    "lbrace": "ElifBlocks -> ''",
    "atomic_type": "ElifBlocks -> ''",
    "lbracket": "ElifBlocks -> ''",
    "identifier": "ElifBlocks -> ''",
    "kw_return": "ElifBlocks -> ''",
    "lparen": "ElifBlocks -> ''",
    "int_literal": "ElifBlocks -> ''",
    "float_literal": "ElifBlocks -> ''",
    "str_literal": "ElifBlocks -> ''",
    "bool_literal": "ElifBlocks -> ''",
    "kw_if": "ElifBlocks -> ''",
    "kw_for": "ElifBlocks -> ''",
    "kw_while": "ElifBlocks -> ''"
  },
  "ElifBlock": {
    "kw_elif": "ElifBlock -> kw_elif Expression lbrace StmtList rbrace"
  },
  "ElseBlock": {
    "kw_else": "ElseBlock -> kw_else lbrace StmtList rbrace",
    "rbrace": "ElseBlock -> ''",
    "lbrace": "ElseBlock -> ''",
    "atomic_type": "ElseBlock -> ''",
    "lbracket": "ElseBlock -> ''",
    "identifier": "ElseBlock -> ''",
    "kw_return": "ElseBlock -> ''",
    "lparen": "ElseBlock -> ''",
    "int_literal": "ElseBlock -> ''",
    "float_literal": "ElseBlock -> ''",
    "str_literal": "ElseBlock -> ''",
    "bool_literal": "ElseBlock -> ''",
    "kw_if": "ElseBlock -> ''",
    "kw_for": "ElseBlock -> ''",
    "kw_while": "ElseBlock -> ''"
  },
  "Loop": { "kw_for": "Loop -> ForLoop", "kw_while": "Loop -> WhileLoop" },
  "ForLoop": {
    "kw_for": "ForLoop -> kw_for identifier kw_in LoopRange lbrace StmtList rbrace"
  },
  "LoopRange": {
    "int_literal": "LoopRange -> int_literal range int_literal LoopStep"
  },
  "LoopStep": {
    "range": "LoopStep -> range int_literal",
    "lbrace": "LoopStep -> ''"
  },
  "WhileLoop": {
    "kw_while": "WhileLoop -> kw_while Expression lbrace StmtList rbrace"
  },
  "Return": { "kw_return": "Return -> kw_return ReturnVariable" },
  "ReturnVariable": {
    "lparen": "ReturnVariable -> Expression",
    "int_literal": "ReturnVariable -> Expression",
    "float_literal": "ReturnVariable -> Expression",
    "str_literal": "ReturnVariable -> Expression",
    "bool_literal": "ReturnVariable -> Expression",
    "identifier": "ReturnVariable -> Expression",
    "semi_colon": "ReturnVariable -> ''"
  },
  "Type": {
    "atomic_type": "Type -> atomic_type",
    "lbracket": "Type -> lbracket int_literal rbracket Type"
  }
}
